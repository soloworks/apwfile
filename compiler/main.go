package main

import (
	"flag"
	"io/ioutil"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/soloworks/go-netlinx/apw"
)

type myargs struct {
	Source string
	Dest   string
}

var args myargs

func main() {
	// Get Command Line Variables
	flag.StringVar(&args.Source, "Source", "", "Source APW File")
	flag.StringVar(&args.Dest, "Dest", "compile.cfg", "Destination CFG File")
	flag.Parse()

	// Load in the core APW file
	a, err := apw.LoadAPW(args.Source)
	if err != nil {
		println(`Error Loading APW File: "` + args.Source + `"`)
		println(err)
		os.Exit(1)
	}

	// Create an empty list for modules
	var Modules []string
	var Source []string

	// Extract list of .axs Modules and .axs Source
	for x, y := range a.FilesReferenced {
		if filepath.Ext(x) == ".axs" {
			switch y {
			case "Module":
				Modules = append(Modules, x)
			case "Source", "MasterSrc":
				Source = append(Source, x)
			}
		}
	}

	// Order the lists
	sort.Strings(Modules)
	sort.Strings(Source)

	// Build the Config File Header & Options
	var sb strings.Builder
	sb.WriteString(";------------------------------------------------------------------------------\n")
	sb.WriteString(";\n")
	sb.WriteString("; Netlinx Compiler Config File generated by Go\n")
	sb.WriteString("; Source: http://github.org/soloworks/go-netlinx/compiler\n")
	sb.WriteString(`; Run> NLRC -C"C:\YourDir\compile.cfg"`)
	sb.WriteString(";\n")
	sb.WriteString(";------------------------------------------------------------------------------\n\n")
	sb.WriteString("MainAXSRootDirectory=-R\n\n")
	sb.WriteString("OutputLogFileOption=N\n")
	sb.WriteString("OutputLogConsoleOption=Y\n")
	sb.WriteString("BuildWithDebugInformation=Y\n")
	sb.WriteString("BuildWithSource=N\n")
	sb.WriteString("BuildWithWC=Y\n\n")

	// Add the Modules
	for _, x := range Modules {
		sb.WriteString("AXSFILE=")
		sb.WriteString(x)
		sb.WriteString("\n")
	}

	sb.WriteString("\n")

	// Add the Source
	for _, x := range Source {
		sb.WriteString("AXSFILE=")
		sb.WriteString(x)
		sb.WriteString("\n")
	}

	// Output to File
	err = ioutil.WriteFile(args.Dest, []byte(sb.String()), 0644)
	if err != nil {
		println(`Error Writing CFG File: "` + args.Dest + `"`)
		println(err)
		os.Exit(1)
	}
}
